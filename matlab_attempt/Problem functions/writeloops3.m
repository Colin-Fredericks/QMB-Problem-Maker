function [answers, correctness, explanation, symbol] = writeloops3(operation,nRow,nCol)
% function WRITELOOPS3 - code for QMB problem writeloops3
%
%   [answers, correctness, explanation] = writeloops3(values)
%

% Get correct symbol for use in loop
map = {'product','*'; ...
    'difference', '-'; ...
    'sum','+'};
map_ind = strcmp(map(:,1),operation);
symbol = map{map_ind,2};

% Get other two symbols so they can be put in wrong answers
other_ind = find(~map_ind);
wrong_symbol1 = map{other_ind(1),2};
wrong_symbol2 = map{other_ind(2),2};

% Make a special symbol with elementwise multiplication for array 
% arithmetic: right{3} below
element_symbol = symbol;
if symbol=='*'
    element_symbol = '.*';
end

% Strings for replacing the colon operator for right{5} below
rowStr = mat2string(1:nRow);
colStr = mat2string(1:nCol);
rowStr_wrong = mat2str(1:nRow-1);
colStr_wrong = mat2str(1:nCol-1);


% Set up the correct answers
right{1} = sprintf(['$$myArray = [];\n' ...
                    'for i = 1:%d\n'  ...
                    '     for j = 1:%d\n' ...
                    '          myArray(i,j) = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],nRow,nCol,symbol);
right{2} = sprintf(['$$array1 = [];\n' ...
                    'array2 = [];\n' ...
                    'for i = 1:%d\n'  ...
                    '     for j = 1:%d\n' ...
                    '          array1(i,j) = i;\n' ...
                    '          array2(i,j) = j;\n' ...
                    '     end\n' ...
                    'end\n' ...
                    'myArray = array1 %s array2;/$$'],nRow,nCol,element_symbol);
right{3} = sprintf(['$$for i = 1:%d\n'  ...
                    '     for j = 1:%d\n' ...
                    '          myArray(i,j) = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],nRow,nCol,symbol);
right{4} = sprintf(['$$myArray = [];\n' ...
                    'for i = %s\n'  ...
                    '     for j = %s\n' ...
                    '          myArray(i,j) = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],rowStr,colStr,symbol);
    
               
right_explanations = {sprintf('Yes. This loop correctly indexes the array and uses the symbol $%c/$ to calculate the %s between the row and column indexes.',symbol,operation), ...
    sprintf('Yes. This loop creates two arrays $array1/$ and $array2/$ with the row and column indexes, respectively. Then, $myArray/$ is correctly calculated with the line $myArray = array1 %s array2;/$',element_symbol), ...
    sprintf('Yes. This loop does not initialize $myArray/$, but the loop will still complete successfully because the row-column indexing used in the line $myArray(i,j) = i %c j;/$ is unambiguous. Matlab will create and extend the array as need. Regardless, it is always a good idea to initialize your arrays, even if it is only to keep track of which variables are used within a loop',symbol), ...
    sprintf('Yes. This loop declares the loop variables with square brackets instead of column arrays, but the end result is the same. This loop also correctly uses the symbol $%c/$ to calculate the %s between the row and column indexes.',symbol,operation)};
               
% Set up the wrong answers
wrong{1} = sprintf(['$$myArray = [];\n' ...
                    'for i = 1:%d\n'  ...
                    '     for j = 1:%d\n' ...
                    '          myArray(i,j) = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],nRow,nCol,wrong_symbol1); %Wrong symbol 
wrong{2} = sprintf(['$$myArray = [];\n' ...
                    'for i = 1:%d\n'  ...
                    '     for j = 1:%d\n' ...
                    '          myArray(i,j) = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],nRow,nCol,wrong_symbol2); %Wrong symbol 
wrong{3} = sprintf(['$$myArray = [];\n' ...
                    'for i = 1:%d\n'  ...
                    '     for j = 1:%d\n' ...
                    '          myArray(i,j) = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],nRow-1,nCol-1,symbol); %Wrong row and col values
wrong{4} = sprintf(['$$myArray = [];\n' ...
                    'for i = %s\n'  ...
                    '     for j = %s\n' ...
                    '          myArray(i,j) = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],rowStr_wrong,colStr_wrong,symbol); %Wrong row and col values
wrong{5} = sprintf(['$$myArray = [];\n' ...
                    'for j = 1:%d\n'  ...
                    '     for i = 1:%d\n' ...
                    '          myArray(j,i) = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],nCol,nRow,symbol); %Creates transpose
wrong{6} = sprintf(['$$array1 = [];\n' ...
                    'array2 = [];\n' ...
                    'for i = 1:%d\n'  ...
                    '     for j = 1:%d\n' ...
                    '          array1(i,j) = i;\n' ...
                    '          array2(i,j) = j;\n' ...
                    '     end\n' ...
                    'end\n' ...
                    'myArray = array1 %s array2;/$$'],nRow,nCol,wrong_symbol1); %Does wrong operation
wrong{7} = sprintf(['$$myArray = [];\n' ...
                    'for i = 1:%d\n'  ...
                    '     for j = 1:%d\n' ...
                    '          myArray = i %c j;\n' ...
                    '     end\n' ...
                    'end/$$'],nRow,nCol,symbol); %Overwrites every loop
               

                
wrong_explanations = {sprintf('No. The problem asks for the %s of the indexes but this loop uses the symbol $%c/$',operation,wrong_symbol1), ...
    sprintf('No. The problem asks for the %s of the indexes but this loop uses the symbol $%c/$',operation,wrong_symbol1), ...
    sprintf('No. This loop uses the incorrect values when defining the loop variables. This array will have %d rows and %d columns instead of the expected %d and %d columns',nRow-1,nCol-1,nRow,nCol), ...
    sprintf('No. This loop uses the incorrect values when defining the loop variables. This array will have %d rows and %d columns instead of the expected %d and %d columns',nRow-1,nCol-1,nRow,nCol), ...
    'No. This loop will create the transpose of the correct array, meaning a value that should be at position $myArray(i,j)/$ will be located at $myArray(j,i)/$.', ...
    sprintf('No. The problem asks for the %s of the indexes but this loop uses the symbol $%c/$ in the last line that creates $myArray/$',operation,wrong_symbol1), ...
    sprintf('No. This loop will repeatedly store a single value into $myArray/$ and then overwrite the value on the next iteration. The line inside the loop should use indexing, e.g $myArray(i,j) = i %c j;/$',symbol)};


%Pick 2-3 correct answers
iRight = randsample(length(right),randi([1 3],1));
answers = right(iRight);
explanation = [];
for ii = iRight'
    explanation = [explanation '<li>' right{ii} '<br/> ' ...
        right_explanations{ii} '</li>'];
end

%Add incorrect answers to make 5 answers
iWrong = randsample(length(wrong), 5-length(iRight));
answers = [answers wrong(iWrong)];
for ii = iWrong'
    explanation = [explanation '<li>' wrong{ii} '<br/> ' ...
        wrong_explanations{ii} '</li>'];
end
   
%Assemble correctness
correctness = convert_logical([true(1,length(iRight)) false(1,length(answers)-length(iRight))]);
