%% if_else5
function [answers,correctness,explanation] = if_else5()

% Possible correct answers
right{1} = sprintf([...
    '$$if x < 0\n'  ...
    '     x = -x;\n' ...
    'end/$$']);
right{2} = sprintf([...
    '$$if x < 0\n'  ...
    '     x = -1*x;\n' ...
    'end/$$']);
right{3} = sprintf([...
    '$$if x <= 0\n'  ...
    '     x = -x;\n' ...
    'end/$$']);
right{4} = sprintf([...
    '$$x = sqrt(x^2)$$']);

    
% Explanations for correct answers
right_explain{1} = 'Yes. This $if/$ statement will replace the value of $x/$ with $-x/$, but only if the value is orginally negative. This will return the absolute value.';
right_explain{2} = 'Yes. This $if/$ statement will replace the value of $x/$ with $-1*x/$, but only if the value is orginally negative. This will return the absolute value.';
right_explain{3} = 'Yes. This $if/$ statement will replace the value of $x/$ with $-x/$, but only if the value is less than or equal to zero. This will return the absolute value. It will also work for an intial value of $x = 0/$. Even though the line $x = -x;/$ will execute, the value will still be $0/$.';
right_explain{4} = 'Yes. This does not use an $if/$ statment, but it will return the absolute value.';

% Wrong answers
wrong{1} = sprintf([...
    '$$if x > 0\n'  ...
    '     x = -x;\n' ...
    'end/$$']);
wrong{2} = sprintf([...
    '$$if x >= 0\n'  ...
    '     x = -x;\n' ...
    'end/$$']);
wrong{3} = sprintf([...
    '$$if x > 0\n'  ...
    '     x = -1*x;\n' ...
    'end/$$']);
wrong{4} = sprintf([...
    '$$if x < 0\n'  ...
    '     x = 1*x;\n' ...
    'end/$$']);
wrong{5} = sprintf([...
    '$$x = -sqrt(x^2)$$']);
wrong{6} = sprintf([...
    '$$if x ~= 0\n'  ...
    '     x = -x;\n' ...
    'end/$$']);
wrong{7} = sprintf([...
    '$$if x < 0\n'  ...
    '     x = 1 - x;\n' ...
    'end/$$']);
wrong{8} = sprintf([...
    '$$if x < 0\n'  ...
    '     x = x;\n' ...
    'end/$$']);


% Explanations for wrong problems
wrong_explain{1} = 'No. This code uses the incorrect logical statement $x > 0/$. It should be $x < 0/$.';
wrong_explain{2} = 'No. This code uses the incorrect logical statement $x > 0/$. It should be $x < 0/$ or $x <= 0/$.';
wrong_explain{3} = 'No. This code uses the incorrect logical statement $x > 0/$. It should be $x < 0/$.';
wrong_explain{4} = 'No. This code multiplies $x/$ by a positive $1/$, which will have no effect. The inner statement should be $x = -1*x;/$';
wrong_explain{5} = 'No. The code $sqrt(x^2)/$ does calculate the absolute value, but the additional negative sign in front will make the answer always negative.';
wrong_explain{6} = 'No. This code uses the incorrect logical statement $x ~= 0/$. It should be $x < 0/$.';
wrong_explain{7} = 'No. This code has the correct logical statement, but the inner line $x = 1 - x/$ does not calculate the correct value. It could be simply $x = -x;/$';
wrong_explain{8} = 'No. This code does not do anything. It would work if the inner statement was $x = -x;/$';

% Pick 1-3 correct answers
iRight = randsample(length(right),randi([1 3],1));
answers = right(iRight);
explanation = [];
for ii = iRight'
    explanation = [explanation '<li>' right{ii} '<br/> ' ...
        right_explain{ii} '</li>'];
end

%Add incorrect answers to make 5 answers
iWrong = randsample(length(wrong), 5-length(iRight));
answers = [answers wrong(iWrong)];
for ii = iWrong'
    explanation = [explanation '<li>' wrong{ii} '<br/> ' ...
        wrong_explain{ii} '</li>'];
end
   
%Assemble correctness
correctness = convert_logical([true(1,length(iRight)) false(1,length(answers)-length(iRight))]);
