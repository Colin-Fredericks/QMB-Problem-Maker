function [answers, correctness, explanation] = writeloops2(name)
% function WRITELOOPS2 - code for QMB problem writeloops2
%
%   [answers, correctness, explanation] = writeloops2(values)
%

% Set up the 3 correct answers
right_answers{1} = sprintf(['$$sumSq = 0;\n' ...
                    'for i = 1:length(%s)\n'  ...
                    '     sumSq = sumSq + %s(i)^2;\n' ...
                    'end/$$'], name,name);
right_answers{2} = sprintf(['$$sumSq = 0;\n' ...
                    'for i = %s\n'  ...
                    '     sumSq = sumSq + i^2;\n' ...
                    'end/$$'], name);
right_answers{3} = sprintf(['$$Sq = [];\n' ...
                    'for i = 1:length(%s)\n'  ...
                   '     Sq(i) = %s(i)^2;\n' ...
                   'end\n' ...
                   'sumSq = sum(Sq);/$$'], name,name);
right_answers{4} = sprintf(['$$Sq = [];\n' ...
                    'for i = %s\n'  ...
                   '     Sq = [Sq i^2];\n' ...
                   'end\n' ...
                   'sumSq = sum(Sq);/$$'],name);
right_answers{5} = sprintf('$$sum(%s.^2);/$$', name);
               
right_explanations = {'Yes. This loop correctly indexes the array and uses a variable $sumSq/$ to keep track of the value.', ...
    'Yes. This loop correctly declares the loop variable such that calling $i/$ will return each value in the array. This loop also correctly uses a variable $sumSq/$ to keep track of the sum', ...
    'Yes. This loop creates a variable $Sq/$ and fills it inside a loop with the squared values. Then, the $sum/$ function is used to add these values together to get the sum of squares.', ...
    'Yes. This loop creates a variable $Sq/$ and appends the squared array values to it inside a loop. Then, the $sum/$ function is used to add these values together to get the sum of squares.', ...
    'Yes. This calculates the sum of squares without a loop. It uses the element-wise power operation $.^2/$ to square each element in the array and the sum function to add them together. If there were a very large number of elements (e.g. hundreds of thousands), then this operation would be significantly faster than using a loop. This is because Matlab''s built-in functions like $sum/$ are optimized to do array calculations quickly.'};
               
% Set up the wrong answers               
wrong_answers{1} = sprintf(['$$sumSq = 0;\n' ...
                    'for i = %s\n'  ...   
                    '     sumSq = i^2;\n' ...
                    'end/$$'],name);  %Not adding the values together
wrong_answers{2} = sprintf(['$$sumSq = 0;\n', ...
                    'for i = 1:length(%s)\n'  ... 
                    '     sumSq = %s(i)^2;\n' ...
                    'end/$$'],name,name); %Not adding the values together
wrong_answers{3} = sprintf(['$$sumSq = 0;\n' ... 
                    'for i = %s\n'  ...
                    '     sumSq = sumSq + %s(i)^2;\n' ...
                    'end/$$'], name,name);  %Double indexing
wrong_answers{4} = sprintf(['$$Sq = [];\n' ...
                    'for i = %s\n'  ...
                   '     Sq = [Sq %s(i)^2];\n' ...
                   'end\n' ...
                   'sumSq = sum(Sq);/$$'], name,name); %Double indexing
wrong_answers{5} = sprintf(['$$Sq = [];\n' ...
                    'for i = %s\n'  ...
                   '     Sq = [i^2];\n' ...
                   'end\n' ...
                   'sumSq = sum(Sq);/$$'], name); %not appending correctly
wrong_answers{6} = sprintf(['$$Sq = [];\n' ...
                    'for i = 1:length(%s)\n'  ...
                   '     Sq = %s(i)^2;\n' ...
                   'end\n' ...
                   'sumSq = sum(Sq);/$$'], name,name); %Not indexing correctly
wrong_answers{7} = sprintf('$$sum(%s^2);/$$', name); %Not using elementwise power
wrong_answers{8} = sprintf(['$$sumSq = 0;\n' ...
                    'for i = 1:length(%s)\n'  ...
                    '     sumSq = sumSq + i^2\n;' ...
                    'end/$$'], name); %Doing sum((1:10).^2)
                
wrong_explanations = {'No. The line $sumSq = i^2;/$ replaces the value in $sumSq/$ on each iteration of the loop. It should add to it, e.g. $sumSq = sumSq +i^2;/$.', ...
    sprintf('No. The statement $sumSq = %s(i)^2;/$ replaces the value in $sumSq/$ on each iteration of the loop. It should add to it, e.g. $sumSq = sumSq +%s(i)^2;/$.',name,name), ...
    sprintf('No. This answer sets up the loop correctly, but then tries to index back into $%s/$ using the values themselves. This will likely cause an "Array index out of bounds" error',name), ...
    sprintf('No. This answer sets up the loop correctly, but then tries to index back into $%s/$ using the values themselves. This will likely cause an "Array index out of bounds" error',name), ...
    'No. The statement $Sq = [i^2];/$ replaces the value in $Sq/$ on each iteration of the loop. It should append to it, e.g. $Sq = [Sq i^2];/$.', ...
    sprintf('No. The statement $Sq = %s(i)^2;/$ replaces the value in $Sq/$ on each iteration of the loop. It should store a value to it with indexing, e.g. $Sq(i) = %s(i)^2;/$.',name,name), ...
    sprintf('No. This almost does the correct calculation without a loop, but it does not use the element-wise power operation, e.g. $%s.^2/$. Without the dot, $%s^2/$ will produce an error',name,name) ...
    'No. This will calculate the sum of square of the indexes $1/$, $2/$, $3/$, etc. but not the values from the array.'};


%Pick 2-4 correct answers
iRight = randsample(length(right_answers),randi([2 4],1));
answers = right_answers(iRight);
explanation = [];
for ii = iRight'
    explanation = [explanation '<li>' right_answers{ii} '<br/> ' ...
        right_explanations{ii} '</li>'];
end

%Add incorrect answers to make 5 answers
iWrong = randsample(length(wrong_answers), 5-length(iRight));
answers = [answers wrong_answers(iWrong)];
for ii = iWrong'
    explanation = [explanation '<li>' wrong_answers{ii} '<br/> ' ...
        wrong_explanations{ii} '</li>'];
end
   
%Assemble correctness
correctness = convert_logical([true(1,length(iRight)) false(1,length(answers)-length(iRight))]);
